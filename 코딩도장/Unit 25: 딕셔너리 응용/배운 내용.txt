1. 딕셔너리 조작 메서드
  - setdefault(키, 기본값): 딕셔너리에 키-기본값 쌍을 추가한 뒤 해당 값을 반환
    - 기본값을 입력하지 않으면 값에 None을 저장
  - update(키=값): 해당 키의 값을 수정
    - 딕셔너리에 없는 키 입력 시 키-값 쌍 추가
    - 키-값 쌍 여러 개를 콤마로 구분해 넣어주어 한꺼번에 수정 가능
    - 키가 문자열일 때만 사용 가능
      - 키가 숫자일 경우: update(딕셔너리) / update(리스트) / update(튜플) / update(반복가능한객체)
  - pop(키): 특정 키-값 쌍 삭제한 뒤 삭제한 값 반환
    - pop(키,기본값): 딕셔너리에 키가 있을 때는 해당 키-값 쌍을 삭제한 뒤 삭제한 값 반환
                     / 키가 없을 경우 기본값만 반환
    = del dict[키]
  - popitem(): 딕셔너리에서 마지막 키-값 쌍 삭제 후 삭제한 키-값 쌍을 튜플로 반환
  - clear(): 딕셔너리의 모든 키-값 쌍 삭제
  - get(키): 딕셔너리의 특정 키 값을 가져옴
    - get(키, 기본값): 딕셔너리에 키가 있으면 해당 값 반환 / 키가 없으면 기본값 반환
  - items(): 딕셔너리의 키-값 쌍을 모두 가져옴
  - keys(): 키를 모두 가져옴
  - values(): 값을 모두 가져옴
  - dt.fromkeys(키리스트, 값): 키 리스트와 값으로 딕셔너리 dt 생성
    - 값을 지정하지 않으면 모두 None으로 저장
  - defaultdict(기본값생성함수): 딕셔너리 생성
    - collectons 모듈에 있음
    - 없는 키에 접근하더라도 에러 발생 X, 기본값 반환
    - defaultdict(int): 기본값이 0인 딕셔너리
    - defaultdict(lambda: '문자열'): 기본값이 '문자열'인 딕셔너리
 
2. 딕셔너리의 값 출력
  - for key, value in dt.items():
        반복할 코드
    : 키-값 쌍 출력
  - for key in dt.keys():
        반복할 코드
    : 키 출력
  - for value in dt.values():
        반복할 코드
    : 값 출력

3. 딕셔너리 표현식
  - {키: 값 for 키, 값 in 딕셔너리} / dict({키: 값 for 키, 값 in 딕셔너리})
  - {키: 값 for 키, 값 in 딕셔너리 if 조건식} / dict({키: 값 for 키, 값 in 딕셔너리 if 조건식})

4. 중첩 딕셔너리
  - 딕셔너리 = {키1: {키a:값a}, 키2: {키b: 값b}}
  - 접근 방법: 딕셔너리[키1][키a]
  
5. 할당과 복사
  - 할당: dict1=dict2
  - 복사: dict1=dict2.copy()
  - 중첩 딕셔너리의 복사: dict1=copy.deepcopy(dict2)
