1. 문자열 조작하는 메서드
  - replace('바꿀 문자열', '새 문자열'): 문자열 안의 문자열을 다른 문자열로 바꿈
  - translate(변환 테이블): 문자열 안의 문자를 다른 문자로 바꿈
    - str.maketrans('바꿀문자', '새문자'): 변환 테이블 생성
  - split('구분자'): 문자열 분리
    - default: 공백 기준
  - '구분자'.join(리스트): 구분자로 문자열 연결
  - upper(): 모두 대문자로 / lower(): 모두 소문자로
  - lstrip(): 왼쪽 공백 삭제 / rstrip(): 오른쪽 공백 삭제 / strip(): 양쪽 공백 삭제
  - lstrip('삭제할 문자들'): 왼쪽의 해당 문자 삭제 / rstrip('삭제할 문자들'): 오른쪽의 해당 문자 삭제 / strip('삭제할 문자들'): 양쪽의 해당 문자 삭제
    - strip(string.punctuation): 문자열 양쪽의 모든 구두점 삭제
      - 공백까지 삭제하고 싶을 경우: strip(string.punctuation + ' ') / strip(string.punctuation).strip()
  - 정렬: 문자열을 지정된 길이로 만든 뒤 정렬, 나머지는 공백으로 채움
    - ljust(길이): 왼쪽 정렬 / rjust(길이): 오른쪽 정렬 / center(길이): 중앙 정렬
  - zfill(길이): 지정된 길이에 맞춰 문자열의 왼쪽에 0을 채움
  - find('찾을 문자열'): 문자열 안에서 특정 문자열을 찾아 인덱스 반환
    - 없으면 -1 반환
    - 같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스 반환
    - rfind('찾을 문자열'): 오른쪽부터 찾기
  - index('찾을 문자열'): 왼쪽에서부터 특정 문자열을 찾아 인덱스 반환 / rindex('찾을 문자열'): 오른쪾부터
    - 없으면 에러
    - 같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스 반환
  - count('문자열'): 현재 문자열에서 특정 문자열이 나오는 횟수
2. 메서드 체이닝: 메서드를 줄줄이 연결하는 것

3. 서식 지정자
  - %와 자료형을 뜻하는 문자
    - ex. %s: 문자열, %d: 10진 정수, %f: 실수
  - ex. '%s' % '문자열'
  - '%.자릿수f' % 숫자: 소수점 이하 자릿수 지정
  - '%길이s' % '문자열': 문자열을 지정된 길이로 만든 뒤 오른쪽으로 정렬, 남는 공간을 공백으로 채움
    - '%길이d' / '%길이.자릿수f'
    - '%-길이s': 왼쪽 정렬
 4. format 메서드
  - '{인덱스}'.format(값)
  - 인덱스 생략 시 format에 지정한 순서대로 값이 들어감
  - 인덱스 대신 이름을 지정할 수 있음
    - ex. '{name}'.format(name=값)
  - f'{변수}'
  - 중괄호 자체를 출력할 때는 중괄호를 두 번 사용
  - '{인덱스:<길이}'.format(값): 문자열 왼쪽으로 정렬
    - :>는 오른쪽 정렬
  - '{인덱스:0개수d}'.format(숫자): 정수 자릿수 맞추기
  - '{인덱스:0개수.자릿수f}'.format(숫자): 실수 자릿수 맞추기
  - format(숫자, ','): 숫자에서 천 단위로 콤마 넣기
